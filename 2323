# -*- coding: utf-8 -*-
from kivy.app import App
from kivy.uix.label import Label
from kivy.uix.button import Button
from kivy.uix.popup import Popup
from kivy.uix.textinput import TextInput
from kivy.uix.gridlayout import GridLayout
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.widget import Widget
import time
import datetime

now = datetime.datetime.now()
# https://pastebin.com/ixWD0BPC
import win32com.client  # needed to load COM objects
import cv2
import traceback
from statistics import mean
import time
import numpy as np
from skyfield.api import N, E, wgs84, load
import socket
# инициализируем видео объект
import os


setting_path = r"C:\Users\MIPT-1\Desktop\SkySlew\Settings\Settings.txt"

dir = os.path.dirname(__file__)


def Usti(Shir, Dolg, WayFile, frmrt, prg):
    try:
        tel = win32com.client.Dispatch("ASCOM.SynScanMobile.Telescope")
        if tel.Connected:
            print("Telescope was already connected")
        else:
            tel.Connected = True
            if tel.Connected:
                print("	Connected to telescope now")
            else:
                print("	Unable to connect to telescope, expect exception")
        planets = load('de421.bsp')
        ts = load.timescale()
        t = ts.now()
        # init earth and sun
        earth, solar = planets['earth'], planets['sun']
        # set current position
        boston = earth + wgs84.latlon(float(Shir) * N, float(Dolg) * E, elevation_m=180)
        # get the location from astrometry
        astrometric = boston.at(t).observe(solar)
        # get altitude and azimuth
        alt, az, d = astrometric.apparent().altaz()
        print(az.degrees, alt.degrees)
        try:
            if (float(az.degrees) > 0 and float(az.degrees) < 357 and float(alt.degrees) > 0 and float(alt.degrees) < 85):
                tel.SlewToAltAz(float(az.degrees), float(alt.degrees))
                print("Ustirovka to sun succsesfully ended")
        except Exception as e:
            print('Ошибка:\n', traceback.format_exc())
            print("Something Wrong with coordinates")
        tel.Tracking = False
        tel.Connected = False
    except Exception as e:
        print('Ошибка:\n', traceback.format_exc())
        print("При юстировке по солнцу что-то пошло не так. Проверьте подключение монтировки.")

def Usti_n():
    try:
        tel = win32com.client.Dispatch("ASCOM.SynScanMobile.Telescope")
        if tel.Connected:
            print("Telescope was already connected")
        else:
            tel.Connected = True
            if tel.Connected:
                print("	Connected to telescope now")
            else:
                print("	Unable to connect to telescope, expect exception")

        # get the location from astrometry


        tel.SlewToAltAz(float(0.5), float(0.5))

        tel.Tracking = False

        print("Ustirovka ended")
    except:
        print("При юстировке по северу что-то пошло не так. Проверьте подключение монтировки.")
stop_cicle = False

def End_ended(k):
    if k < 0:
        return 0
    else:
        return k

def Stoop():
    HOST = '127.0.0.1'  # The remote host
    PORT = 11881  # The same port as used by the server
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.connect((HOST, PORT))
    global stop_cicle
    stop_cicle = True
    s.send(('MoveAxis,1,0').encode())
    time.sleep(0.005)  # Сон в 3 секунды
    s.send(('MoveAxis,0,0').encode())
    s.close()





def appMaker(Shir, Dolg, WayFile, frmrt, prg):
    stooop = False
    for FH in range(50):
        try:
            os.system("TASKKILL /F /IM SynScanPro.exe")
            time.sleep(2)  # Сон в 3 секунды
            os.startfile(r"C:\Users\MIPT-1\Desktop\SkySlew\synscanpro_windows_11912\SynScanPro_Windows\SynScanPro.exe")
            time.sleep(4)  # Сон в 3 секунды
            os.mkdir(r'{}'.format(WayFile) + "/" + "era_" + str(FH))
            print((r'{}'.format(WayFile) + "/" + "era_" + str(FH)))
            HOST = '127.0.0.1'  # The remote host
            PORT = 11881  # The same port as used by the server
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.connect((HOST, PORT))
            setting_path = r"C:\Users\MIPT-1\Desktop\SkySlew\Settings\Settings.txt"
            if stooop:
                break
            # load planet database
            # creating the list of nums to normalize
            NormalizationList = []
            # try:
            tel = win32com.client.Dispatch("ASCOM.SynScanMobile.Telescope")
            if tel.Connected:
                print("Telescope was already connected")
            else:
                tel.Connected = True
                if tel.Connected:
                    print("	Connected to telescope now")
                else:
                    print("	Unable to connect to telescope, expect exception")
            tel.Tracking = False
            mount_is_ok = True
            filename = os.path.join(dir, setting_path)
            with open(filename, "w") as file:
                file.write(Shir + "???")
            with open(filename, "a") as file:
                file.write('\n' + Dolg + "???")
                file.write('\n' + WayFile + "???")
                file.write('\n' + frmrt + "???")
                file.write('\n' + prg + "???")

            planets = load('de421.bsp')
            ts = load.timescale()
            t = ts.now()
            # init earth and sun
            earth, solar = planets['earth'], planets['sun']
            # set current position
            boston = earth + wgs84.latlon(float(Shir) * N, float(Dolg) * E, elevation_m=180)
            # get the location from astrometry
            astrometric = boston.at(t).observe(solar)
            # get altitude and azimuth
            alt, az, d = astrometric.apparent().altaz()
            # инициализируем видео объект
            vid = cv2.VideoCapture(0, cv2.CAP_DSHOW)

            # vid.set(cv2.CAP_PROP_FRAME_WIDTH, 3840)
            # vid.set(cv2.CAP_PROP_FRAME_HEIGHT, 2160)

            # Создаем переменную поворота (угол азимута)
            # Создаем переменную высоты
            # переменная площаи пятна солнца

            currentPov = 0
            currentVis = 0
            contcont = 0

            # start number of frame
            i = 1

            j = 0
            # the normalized square of pixels
            sr = 0

            # color canals of bounding rectangle
            r = 50
            g = 40
            b = 70
            vert_speed = '0'
            hor_speed = '0'

            ocher = 0
            no_sun = 0
            print(" nachalo cicla")
            ch = 0
            is_ok = False
            camera_is_ok = True
            while (True):
                bf_ver = 333333333
                bf_hor = 333333333
                i += 1
                # get a frame from video
                ret, frame = vid.read()
                camera_is_ok = True
                mount_is_ok = True
                if camera_is_ok and mount_is_ok:
                    # copy of frame to work with indicator
                    frame2 = frame
                    # convert frame to grayscale
                    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
                    # get the binaries image
                    th, im_th = cv2.threshold(frame, 100, 255, cv2.THRESH_BINARY)
                    # get the binaries to indicator
                    th2, im_th2_flag = cv2.threshold(frame, 210, 255, cv2.THRESH_BINARY)

                    # get the width and height
                    width = im_th.shape[1]
                    height = im_th.shape[0]
                    # get the centre coordinates
                    centreImX = width / 2
                    centreImY = height / 2
                    # default centre of rectangle
                    cx = centreImX
                    cy = centreImY
                    # Find contours and extract the bounding rectangle coordintes
                    # then find moments to obtain the centroid
                    cnts = cv2.findContours(im_th, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
                    cnts = cnts[0] if len(cnts) == 2 else cnts[1]
                    # if there is more then 1 countour
                    if len(cnts) > 1:
                        # we get the biggest if them
                        cnts_1 = max(cnts, key=cv2.contourArea)
                        cnts = [1]
                        cnts[0] = cnts_1
                    # then the same we do with indicator blob
                    cnts2 = cv2.findContours(im_th2_flag, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_NONE)
                    cnts2 = cnts2[0] if len(cnts2) == 2 else cnts2[1]

                    if len(cnts2) > 1:
                        cnts_12 = max(cnts2, key=cv2.contourArea)
                        cnts2 = [1]
                        cnts2[0] = cnts_12
                    # the same with indi till here

                    # for every countour we draw rect
                    for c in cnts:
                        # Obtain bounding box coordinates and draw rectangle
                        x, y, w, h = cv2.boundingRect(c)
                        cv2.rectangle(frame2, (x, y), (x + w, y + h), (b, g, r), 2)

                        # Find center coordinate and draw center point
                        M = cv2.moments(c)
                        if M['m00'] == 0:
                            M['m00'] = 1
                        cx = int(M['m10'] / M['m00'])
                        cy = int(M['m01'] / M['m00'])
                        cv2.circle(frame2, (cx, cy), 2, (36, 255, 12), -1)
                        # print(int(centreImX), int(centreImX), End_ended(int(centreImX - 40)), int(centreImX + 40))
                        cv2.line(frame2, (int(cx - 40), int(cy)), (int(cx+40), int(cy)), (0, 255, 0), thickness=2)
                        cv2.line(frame2, (int(cx), int(cy-40)), (int(cx), int(cy + 40)), (0, 255, 0), thickness=2)
                        cv2.circle(frame2, (int(centreImX), int(centreImY)), 5, (255, 100, 50), 2)
                        # print(int(centreImX), int(centreImX), End_ended(int(centreImX-40)), int(centreImX + 40))
                    cv2.line(frame2, (End_ended(int(centreImX-40)), int(centreImY)), (int(centreImX + 40), int(centreImY)), (0, 255, 0), thickness=2)
                    cv2.line(frame2, (int(centreImX), End_ended(int(centreImY - 40))), (int(centreImX), int(centreImY + 40)), (0, 255, 0),
                             thickness=2)

                    # the normalization block
                    if len(cnts2) > 0:
                        # get conyour of our sun
                        cnts_12 = cnts2[0]
                        # enum area
                        contcont2 = cv2.contourArea(cnts_12)
                        # every 30th frame
                        if (i % 15) == 0:
                            # append the area of blob
                            NormalizationList.append(contcont2)
                            sr = mean(NormalizationList)
                            if (sr - contcont2) > sr * (float(prg) / 100):
                                r = 255
                                b = 20
                                g = 40
                            else:
                                r = 20
                                b = 40
                                g = 255

                    if len(cnts2) > 0:
                        no_sun = 0
                    else:
                        no_sun += 1

                    width = im_th.shape[1]
                    height = im_th.shape[0]
                    if (i % 2) == 0:
                        if cx - centreImX > 2:
                            hor_speed = '0.01'
                        if cx - centreImX < (-2):
                            hor_speed = '-0.01'
                        if cy - centreImY > 2:
                            vert_speed = '-0.01'
                        if cy - centreImY < (-2):
                            vert_speed = '0.01'
                        if cx - centreImX > 100:
                            hor_speed = '0.1'
                        if cx - centreImX < (-100):
                            hor_speed = '-0.1'
                        if cy - centreImY > 100:
                            vert_speed = '-0.1'
                        if cy - centreImY < (-100):
                            vert_speed = '0.1'

                    if abs(cx - centreImX) < 2:
                        hor_speed = '0'
                    if abs(cy - centreImY) < 2:
                        vert_speed = '0'
                    if len(cnts2) == 0:
                        hor_speed = '0'
                        vert_speed = '0'

                    if bf_ver != vert_speed and i % 2 == 0:
                        s.send(('MoveAxis,1,' + vert_speed).encode())
                        bf_ver = vert_speed
                    if bf_hor != hor_speed and i % 2 == 1:
                        s.send(('MoveAxis,0,' + hor_speed).encode())
                        bf_hor = hor_speed

                    st = "centre:" + f"{cx, cy}" + "   " + "diff:" + f"{cx - centreImX, cy - centreImY}" + '    ' + "Area:" + f"{contcont, round(sr)}" + "     " + "cnts2:" + str(
                        len(cnts2)) + "  " + vert_speed + '  ' + hor_speed
                    cv2.putText(frame2, st, (10, 430), 1, 1, (90, 180, 150), 1, cv2.LINE_AA)

                    now = datetime.datetime.now()

                    cv2.putText(frame2, str(now), (10, 30), 1, 1, (180, 126, 210), 1, cv2.LINE_AA)

                    if (i % int(frmrt)) == 0:
                        cv2.imwrite(r'{}'.format(WayFile) + "/" + "era_" + str(FH) + "/" + str(i) + "2" +'Test_gray.jpg', frame2)

                    # if abs(cx - centreImX) < 4:
                    #     tel.AbortSlew
                    # if abs(cy - centreImY) < 4:
                    #     tel.AbortSlew
                    # print(r'{}'.format(WayFile) + "/" + str(i) + "2" +'Test_gray.jpg')
                    if no_sun > 9000:

                        ts = load.timescale()
                        t = ts.now()
                        # init earth and sun
                        earth, solar = planets['earth'], planets['sun']
                        # set current position
                        boston = earth + wgs84.latlon(float(Shir) * N, float(Dolg) * E, elevation_m=180)
                        # get the location from astrometry
                        astrometric = boston.at(t).observe(solar)
                        # get altitude and azimuth
                        alt, az, d = astrometric.apparent().altaz()
                        no_sun = 0

                        if (float(az.degrees) > 0 and float(az.degrees) < 357 and float(alt.degrees) > 0 and float(
                                alt.degrees) < 85):
                            tel.SlewToAltAz(float(az.degrees), float(alt.degrees))

                        # set the coordinates of apriori position of sun
                        no_sun = 0
                        time.sleep(0.05)  # Сон в 3 секунды

                    print(st, end="\r")

                    cv2.imshow('image', frame2)
                    cv2.waitKey(1)

                    if cv2.getWindowProperty('image', cv2.WND_PROP_VISIBLE) < 1:
                        vid.release()
                        stooop = True
                        # Destroy all the windows
                        cv2.destroyAllWindows()
                        s.close()
                        break
                    if i > 300000:
                        vid.release()
                        # Destroy all the windows
                        cv2.destroyAllWindows()
                        s.close()
                        break
                    # the 'q' button is set as the
                    # quitting button
                    if cv2.waitKey(1) & 0xFF == ord('q'):
                        vid.release()
                        # Destroy all the windows
                        cv2.destroyAllWindows()
                        s.close()

                        stooop = True
                        break
                    # if stop_cicle:
                    #     vid.release()
                    #     # Destroy all the windows
                    #     cv2.destroyAllWindows()
                    #     s.close()
                    #     break
                    # except:
                    #     print(Exception)

            tel.Connected = False
        except Exception as e:
            print('Ошибка:\n', traceback.format_exc())
            print("Отсутствует или потеряна связь с камерой и/или монтировкой. Переподключите устройства и попробуйте еще раз.")

class SimpleKivy(App):



    def build(self):

        def Coordinates():
            try:
                tel = win32com.client.Dispatch("ASCOM.SynScanMobile.Telescope")
                if tel.Connected:
                    print("Telescope was already connected")
                else:
                    tel.Connected = True
                    if tel.Connected:
                        print("	Connected to telescope now")
                    else:
                        print("	Unable to connect to telescope, expect exception")
                    lbl7.text = "Altitude:" + str(tel.Altitude) + '   ' +  "Azimuth:" + str(tel.Azimuth)
            except Exception as e:
                print('Ошибка:\n', traceback.format_exc())
                print("Что-то пошло не так при получении координат. Проверьте подключение монтировки.")

        grid = GridLayout(rows=9, cols=2)
        lbl1 = Label(text="Широта:", italic=True, bold=True)
        lbl3 = Label(text="Путь:", italic=True, bold=True)
        lbl2 = Label(text="Долгота:", italic=True, bold=True)
        lbl4 = Label(text="Фреймрейт:", italic=True, bold=True)
        lbl5 = Label(text="Порог (%):", italic=True, bold=True)
        lbl6 = Label(text="Координаты:", italic=True, bold=True)
        txt1 = TextInput(multiline=False, font_size=50)
        txt2 = TextInput(multiline=False, font_size=50)
        txt3 = TextInput(multiline=False, font_size=20)
        txt4 = TextInput(multiline=False, font_size=50)
        txt5 = TextInput(multiline=False, font_size=50)
        lbl7 = Label(text="0 0:", italic=True, bold=True)
        btn1 = Button(text="Выход", italic=True)
        btn2 = Button(text="Старт", italic=True)
        btn3 = Button(text="Юстировка to North", italic=True)
        btn4 = Button(text="Стоп", italic=True)
        btn5 = Button(text="Юстировка to sun", italic=True)
        btn6 = Button(text="Coordinates", italic=True)
        filename = os.path.join(dir, setting_path)
        with open(filename, "r") as file:
            contents = file.readlines()
            print(contents)
            if contents[0][-3] == '?':
                txt1.text = contents[0][0:-4]
            if contents[1][-3] == '?':
                txt2.text = contents[1][0:-4]
            if contents[2][-3] == '?':
                txt3.text = contents[2][0:-4]
            if contents[3][-3] == '?':
                txt4.text = contents[3][0:-4]
            if contents[4][-3] == '?':
                txt5.text = contents[4][0:-3]
        # except:
        #   print("No data to load")
        btn3.bind(on_press=lambda *a: Usti_n())
        btn1.bind(on_press=lambda *a: self.stop())
        btn4.bind(on_press=lambda *a: Stoop())
        btn2.bind(on_press=lambda *a: appMaker(txt1.text, txt2.text, txt3.text, txt4.text, txt5.text))
        btn5.bind(on_press=lambda *a: Usti(txt1.text, txt2.text, txt3.text, txt4.text, txt5.text))
        btn6.bind(on_press=lambda *a: (Coordinates()))
        grid.add_widget(lbl1)
        grid.add_widget(txt1)
        grid.add_widget(lbl2)
        grid.add_widget(txt2)
        grid.add_widget(lbl3)
        grid.add_widget(txt3)
        grid.add_widget(lbl4)
        grid.add_widget(txt4)
        grid.add_widget(lbl5)
        grid.add_widget(txt5)
        grid.add_widget(lbl6)
        grid.add_widget(lbl7)
        grid.add_widget(btn1)
        grid.add_widget(btn2)
        grid.add_widget(btn3)
        grid.add_widget(btn4)
        grid.add_widget(btn5)
        grid.add_widget(btn6)

        return grid

SimpleKivy().run()

